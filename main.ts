import { GigaChat } from 'entities/gigachat';
import { GigaNotesSettingTab } from 'GigaNotesSettingTab';
import { Editor, Notice, Plugin } from 'obsidian';

enum EGigaNotesStatus {
	READY_TO_WORK,
	NOT_AUTHORIZED,
	IN_PROGRESS
}

enum EGenerationType {
	DEFINITION,
	TEXT_EXPAND,
	CUSTOM_REQUEST,
}

const GENERATION_PROMPT: Record<EGenerationType, string> = {
	[EGenerationType.DEFINITION]:
		`–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —ë–º–∫–æ–µ, –Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. –§–æ—Ä–º–∞—Ç: "–¢–µ—Ä–º–∏–Ω - —ç—Ç–æ [—Å—É—â–Ω–æ—Å—Ç—å], –∫–æ—Ç–æ—Ä–∞—è...". 
    –£–∫–∞–∂–∏ 2-3 –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –ë—É–¥—å –ª–∞–∫–æ–Ω–∏—á–µ–Ω (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ò—Å–ø–æ–ª—å–∑—É–π markdown —Ä–∞–∑–º–µ—Ç–∫—É`,

	[EGenerationType.TEXT_EXPAND]:
		`–î–æ–ø–æ–ª–Ω–∏ —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏ –º—ã—Å–ª—å, 
    –Ω–µ –∏–∑–º–µ–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç. –î–æ–±–∞–≤—å 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–¥–µ—é. –ò—Å–ø–æ–ª—å–∑—É–π markdown —Ä–∞–∑–º–µ—Ç–∫—É`,
	[EGenerationType.CUSTOM_REQUEST]: "–ö–æ—Ä–æ—Ç–∫–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤ obsidian",
};

const GIGA_NOTES_STATUS_TEXT: Record<EGigaNotesStatus, string> = {
	[EGigaNotesStatus.READY_TO_WORK]:
		`GigaNotes –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`,
	[EGigaNotesStatus.NOT_AUTHORIZED]:
		`GigaNotes –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`,
	[EGigaNotesStatus.IN_PROGRESS]:
		`GigaNotes –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å`
}

const STATUS_ICONS: Record<EGigaNotesStatus, string> = {
	[EGigaNotesStatus.READY_TO_WORK]: "‚úÖ",
	[EGigaNotesStatus.NOT_AUTHORIZED]: "üîë",
	[EGigaNotesStatus.IN_PROGRESS]: "‚è≥"
};

const GIGACHAT_CONFIG = {
	AUTH_URL: "http://85.198.81.98:8081/api/v2/oauth",
	API_URL: "http://85.198.81.98:8082/api/v1/chat/completions",
};

interface IGigaNotesSettings {
	model: string;
	scope: string;
	authKey?: string,
}

const DEFAULT_SETTINGS: IGigaNotesSettings = {
	model: 'GigaChat',
	scope: 'GIGACHAT_API_PERS'
}

export default class GigaNotesPlugin extends Plugin {
	private gigaChat: GigaChat;
	private statusBarItem: HTMLElement;

	settings: IGigaNotesSettings;

	async onload() {
		console.log('loading GigaNotes');

		await this.loadSettings();

		this.addSettingTab(new GigaNotesSettingTab(this.app, this));
		this.initGigaChat()
	}

	private initGigaChat() {
		if (!this.settings.authKey) {
			new Notice('–ù–µ —É–∫–∞–∑–∞–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞');
			this.changeStatusBarStatus(EGigaNotesStatus.NOT_AUTHORIZED);
			return
		}

		this.gigaChat = new GigaChat({
			model: this.settings.model,
			scope: this.settings.scope,
			authKey: this.settings.authKey,

			apiUrl: GIGACHAT_CONFIG.API_URL,
			authUrl: GIGACHAT_CONFIG.AUTH_URL,
		})

		this.changeStatusBarStatus(EGigaNotesStatus.READY_TO_WORK);

		this.addCommand({
			id: 'definition',
			name: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
			editorCallback: async (editor) => {
				this.changeStatusBarStatus(EGigaNotesStatus.IN_PROGRESS)
				await this.generateDefinition(editor)
				this.changeStatusBarStatus(EGigaNotesStatus.READY_TO_WORK)
			},
		});

		this.addCommand({
			id: 'text-expand',
			name: '–î–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç',
			editorCallback: async (editor) => {
				this.changeStatusBarStatus(EGigaNotesStatus.IN_PROGRESS)
				await this.generateExpandedText(editor)
				this.changeStatusBarStatus(EGigaNotesStatus.READY_TO_WORK)
			},
		});

		this.addCommand({
			id: 'custom-request',
			name: '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç',
			editorCallback: async (editor) => {
				this.changeStatusBarStatus(EGigaNotesStatus.IN_PROGRESS)
				await this.generateAnswer(editor)
				this.changeStatusBarStatus(EGigaNotesStatus.READY_TO_WORK)
			},
		});

		this.registerEvent(
			this.app.workspace.on("editor-menu", (menu, editor, view) => {
				const selection = editor.getSelection();

				if (!selection) return;

				menu.addItem((item) =>
					item.setTitle("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
						.setIcon("book")
						.onClick(async () => {
							this.changeStatusBarStatus(EGigaNotesStatus.IN_PROGRESS)
							await this.generateDefinition(editor)
							this.changeStatusBarStatus(EGigaNotesStatus.READY_TO_WORK)
						})
				);

				menu.addItem((item) =>
					item.setTitle("–î–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç")
						.setIcon("pencil")
						.onClick(async () => {
							this.changeStatusBarStatus(EGigaNotesStatus.IN_PROGRESS)
							await this.generateExpandedText(editor)
							this.changeStatusBarStatus(EGigaNotesStatus.READY_TO_WORK)
						})
				);

				menu.addItem((item) =>
					item.setTitle("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
						.setIcon("pencil")
						.onClick(async () => {
							this.changeStatusBarStatus(EGigaNotesStatus.IN_PROGRESS)
							await this.generateAnswer(editor)
							this.changeStatusBarStatus(EGigaNotesStatus.READY_TO_WORK)
						})
				);
			})
		);

	}

	private changeStatusBarStatus(status: EGigaNotesStatus) {
		if (!this.statusBarItem) {
			this.statusBarItem = this.addStatusBarItem();
		}

		const statusText = `${STATUS_ICONS[status]} ${GIGA_NOTES_STATUS_TEXT[status]}`;
		this.statusBarItem.setText(statusText);
	}

	private async generateDefinition(editor: Editor) {
		const selection = editor.getSelection();

		if (!selection) return;

		try {
			editor.replaceSelection(await this.generateContent(GENERATION_PROMPT[EGenerationType.DEFINITION], selection));
		} catch (error) {
			if (error instanceof Error) {
				new Notice(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${error.message}`)
			} else {
				new Notice(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`)
			}
		}
	}

	private async generateExpandedText(editor: Editor) {
		const selection = editor.getSelection();

		if (!selection) return;

		try {
			editor.replaceSelection(await this.generateContent(GENERATION_PROMPT[EGenerationType.TEXT_EXPAND], selection));
		} catch (error) {
			if (error instanceof Error) {
				new Notice(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${error.message}`)
			} else {
				new Notice(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`)
			}
		}
	}

	private async generateAnswer(editor: Editor) {
		const selection = editor.getSelection();

		if (!selection) return;

		try {
			editor.replaceSelection(await this.generateContent(GENERATION_PROMPT[EGenerationType.CUSTOM_REQUEST], selection));
		} catch (error) {
			if (error instanceof Error) {
				new Notice(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${error.message}`)
			} else {
				new Notice(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`)
			}
		}
	}

	private async generateContent(prompt: string, text: string) {
		if (!this.gigaChat) {
			throw Error('–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω GigaChat. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ Obsidian');
		}

		return this.gigaChat.getAnswer([{ role: "system", content: prompt }, { role: "user", content: text }])
	}

	async loadSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
	}

	async saveSettings() {
		await this.saveData(this.settings);
		this.initGigaChat();
	}
}